.TH "PAPI_hl_region_begin" 3 "Fri Aug 30 2024 19:06:49" "Version 7.2.0.0b1" "PAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PAPI_hl_region_begin \- Read performance events at the beginning of a region\&.  

.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 

.PP
\fBC Interface:\fP
.RS 4
#include <\fBpapi\&.h\fP> 
.br
int PAPI_hl_region_begin( const char* region );
.RE
.PP
\fBParameters\fP
.RS 4
\fIregion\fP -- a unique region name
.RE
.PP
\fBReturn values\fP
.RS 4
\fIPAPI_OK\fP 
.br
\fIPAPI_ENOTRUN\fP -- EventSet is currently not running or could not determined\&. 
.br
\fIPAPI_ESYS\fP -- A system or C library call failed inside PAPI, see the errno variable\&. 
.br
\fIPAPI_EMISC\fP -- PAPI has been deactivated due to previous errors\&. 
.br
\fIPAPI_ENOMEM\fP -- Insufficient memory\&.
.RE
.PP
\fBPAPI_hl_region_begin\fP reads performance events and stores them internally at the beginning of an instrumented code region\&. If not specified via the environment variable PAPI_EVENTS, default events are used\&. The first call sets all counters implicitly to zero and starts counting\&. Note that if PAPI_EVENTS is not set or cannot be interpreted, default performance events are recorded\&.
.PP
\fBExample:\fP
.RS 4

.RE
.PP
.PP
.nf
export PAPI_EVENTS="PAPI_TOT_INS,PAPI_TOT_CYC"
.fi
.PP
.PP
.PP
.nf
int retval;

retval = PAPI_hl_region_begin("computation");
if ( retval != PAPI_OK )
    handle_error(1);

 //Do some computation here

retval = PAPI_hl_region_end("computation");
if ( retval != PAPI_OK )
    handle_error(1);
.fi
.PP
.PP
\fBSee also\fP
.RS 4
\fBPAPI_hl_read\fP 
.PP
\fBPAPI_hl_region_end\fP 
.PP
\fBPAPI_hl_stop\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for PAPI from the source code\&.
