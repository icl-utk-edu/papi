.TH "PAPI_stop" 3 "Fri Aug 30 2024 19:06:49" "Version 7.2.0.0b1" "PAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PAPI_stop \- Stop counting hardware events in an event set\&.  

.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 

.PP
\fBC Interface:\fP
.RS 4
#include <\fBpapi\&.h\fP> 
.br
 int PAPI_stop( int  EventSet, long long * values );
.RE
.PP
\fBParameters\fP
.RS 4
\fIEventSet\fP -- an integer handle for a PAPI event set as created by \fBPAPI_create_eventset\fP 
.br
\fIvalues\fP -- an array to hold the counter values of the counting events
.RE
.PP
\fBReturn values\fP
.RS 4
\fIPAPI_OK\fP 
.br
\fIPAPI_EINVAL\fP One or more of the arguments is invalid\&. 
.br
\fIPAPI_ESYS\fP A system or C library call failed inside PAPI, see the errno variable\&. 
.br
\fIPAPI_ENOEVST\fP The EventSet specified does not exist\&. 
.br
\fIPAPI_ENOTRUN\fP The EventSet is currently not running\&.
.RE
.PP
\fBPAPI_stop\fP halts the counting of a previously defined event set and the counter values contained in that EventSet are copied into the values array Assumes an initialized PAPI library and a properly added event set\&.
.PP
\fBExample:\fP
.RS 4

.PP
.nf
int EventSet = PAPI_NULL;
long long values[2];
int ret;

ret = PAPI_create_eventset(&EventSet);
if (ret != PAPI_OK) handle_error(ret);

// Add Total Instructions Executed to our EventSet
ret = PAPI_add_event(EventSet, PAPI_TOT_INS);
if (ret != PAPI_OK) handle_error(ret);

// Start counting
ret = PAPI_start(EventSet);
if (ret != PAPI_OK) handle_error(ret);
poorly_tuned_function();
ret = PAPI_stop(EventSet, values);
if (ret != PAPI_OK) handle_error(ret);
printf("%lld\\\\n",values[0]);

.fi
.PP
.RE
.PP
\fBSee also\fP
.RS 4
\fBPAPI_create_eventset\fP \fBPAPI_start\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for PAPI from the source code\&.
